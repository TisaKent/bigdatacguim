knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
output2<-NBA1415bestThreeponit[order(NBA1415bestThreeponit$Threepointshot,decreasing = T),c("Team","Name","Threepointshot")]
title: "NBA 2014-2015球季 各隊分析"
output: html_document
---
install.packages("SportsAnalytics")
library(SportsAnalytics)
NBA1415<-fetch_NBAPlayerStatistics("14-15")
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
##各隊最辛苦的球員
計算依據為全季上場時間最多的球員
```{r cars}
Maxminutes<-aggregate(TotalMinutesPlayed~Team,NBA1415,max)
NBA1415Maxminutes<-merge(NBA1415,Maxminutes)
output<-NBA1415Maxminutes[order(NBA1415Maxminutes$TotalMinutesPlayed,decreasing = T),c("Team","Name","TotalMinutesPlayed")]
library(knitr)
kable(output, digits=2)
```
##各隊得分王
計算依據為全季總得分最多的球員
```{r pressure, echo=FALSE}
MaxPoint<-aggregate(TotalPoints~Team,NBA1415,max)
NBA1415MaxPoint<-merge(NBA1415,MaxPoint)
output<-NBA1415MaxPoint[order(NBA1415MaxPoint$TotalPoints,decreasing = T),c("Team","Name","TotalPoints")]
library(knitr)
kable(output, digits=2)
```
##各隊最有效率的球員
計算依據為全季最有效率的球員
```{r pressure, echo=FALSE}
NBA1415$efficiency<-NBA1415$TotalPoints/NBA1415$TotalMinutesPlayed
Maxefficiency<-aggregate(efficiency~Team,NBA1415,max)
NBA1415Maxefficiency<-merge(NBA1415,Maxefficiency)
output<-NBA1415Maxefficiency[order(NBA1415Maxefficiency$efficiency,decreasing = T),c("Team","Name","efficiency")]
library(knitr)
kable(output, digits=2)
knitr::opts_chunk$set(echo = TRUE)
kable(output, digits=2)
```
##各隊三分球出手最準的球員
```
---
title: "NBA 2014-2015球季 各隊分析"
output: html_document
---
install.packages("SportsAnalytics")
library(SportsAnalytics)
NBA1415<-fetch_NBAPlayerStatistics("14-15")
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
##各隊最辛苦的球員
計算依據為全季上場時間最多的球員
```{r cars}
Maxminutes<-aggregate(TotalMinutesPlayed~Team,NBA1415,max)
NBA1415Maxminutes<-merge(NBA1415,Maxminutes)
output<-NBA1415Maxminutes[order(NBA1415Maxminutes$TotalMinutesPlayed,decreasing = T),c("Team","Name","TotalMinutesPlayed")]
library(knitr)
kable(output, digits=2)
```
##各隊得分王
計算依據為全季總得分最多的球員
```{r pressure, echo=FALSE}
MaxPoint<-aggregate(TotalPoints~Team,NBA1415,max)
NBA1415MaxPoint<-merge(NBA1415,MaxPoint)
output<-NBA1415MaxPoint[order(NBA1415MaxPoint$TotalPoints,decreasing = T),c("Team","Name","TotalPoints")]
library(knitr)
kable(output, digits=2)
```
##各隊最有效率的球員
計算依據為全季最有效率的球員
```{r pressure, echo=FALSE}
NBA1415$efficiency<-NBA1415$TotalPoints/NBA1415$TotalMinutesPlayed
Maxefficiency<-aggregate(efficiency~Team,NBA1415,max)
NBA1415Maxefficiency<-merge(NBA1415,Maxefficiency)
output<-NBA1415Maxefficiency[order(NBA1415Maxefficiency$efficiency,decreasing = T),c("Team","Name","efficiency")]
library(knitr)
kable(output, digits=2)
knitr::opts_chunk$set(echo = TRUE)
kable(output, digits=2)
```
##各隊三分球出手最準的球員
計算依據為全季三分球最準的球員
```{r pressure, echo=FALSE}
NBA1415$Threepointshot<-NBA1415$ThreesMade/NBA1415$ThreesAttempted
bestThreeponit<-aggregate(Threepointshot~Team,NBA1415,max)
NBA1415bestThreeponit<-merge(NBA1415,bestThreeponit)
output2<-NBA1415bestThreeponit[order(NBA1415bestThreeponit$Threepointshot,decreasing = T),c("Team","Name","Threepointshot")]
library(knitr)
kable(output2, digits=2)
knitr::opts_chunk$set(echo = TRUE)
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
token<-'CAACEdEose0cBAG6oKShrWGrses30YTZC7ZAY1l2nQBg1VFHeeZCSkSt2ogazJJUMkinLZC4RYBabvvKOX9NtUDQLKG4xZBtEHxNQ2x4LWm98GowYZBPBRZA93SUlST0TaxWOZAkDZCKjhBGWOGM11DwGiKyTADvgzqsbZAUDVZBdSAXI1THBzuwHD3NhfERGgK2ZCYeosJb4M19ZBipZB7WQORb6iCL23hsLg2JTgZD'
totalPage<-NULL
lastDate<-Sys.Date()
DateVectorStr<-as.character(seq(as.Date("2016-01-01"),lastDate,by="5 days"))
for(i in 1:(length(DateVectorStr)-1)){
tempPage<-getPage("tsaiingwen", token,
since = DateVectorStr[i],until = DateVectorStr[i+1])
totalPage<-rbind(totalPage,tempPage)
}
nrow(totalPage)
totalPage$datetime <- as.POSIXct(totalPage$created_time,
format = "%Y-%m-%dT%H:%M:%S+0000",
tz = "GMT")
totalPage$dateTPE <- format(totalPage$datetime, "%Y-%m-%d",
tz = "Asia/Taipei")
totalPage$weekdays <-weekdays(as.Date(totalPage$dateTPE))
output<-aggregate(message~weekdays+dateTPE,totalPage,length)
library(knitr)
kable(output, digits=2)
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
totalPage<-NULL
lastDate<-Sys.Date()
DateVectorStr<-as.character(seq(as.Date("2016-01-01"),lastDate,by="5 days"))
for(i in 1:(length(DateVectorStr)-1)){
tempPage<-getPage("tsaiingwen",token,
since = DateVectorStr[i],until = DateVectorStr[i+1])
totalPage<-rbind(totalPage,tempPage)
}
nrow(totalPage)
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
totalPage$datetime <- as.POSIXct(totalPage$created_time,
format =  "%Y-%m-%dT%H:%M:%S+0000",
tz = "GMT")
totalPage$dateTPE <- format(totalPage$datetime, "%Y-%m-%d",
tz = "Asia/Taipei")
totalPage$weekdays <-weekdays(as.Date(totalPage$dateTPE))
PC<-aggregate(id~dateTPE+weekdays,totalPage,length)
library(knitr)
kable(head(PC[order(PC$id,decreasing = T),]))
token <- 'CAACEdEose0cBAG6oKShrWGrses30YTZC7ZAY1l2nQBg1VFHeeZCSkSt2ogazJJUMkinLZC4RYBabvvKOX9NtUDQLKG4xZBtEHxNQ2x4LWm98GowYZBPBRZA93SUlST0TaxWOZAkDZCKjhBGWOGM11DwGiKyTADvgzqsbZAUDVZBdSAXI1THBzuwHD3NhfERGgK2ZCYeosJb4M19ZBipZB7WQORb6iCL23hsLg2JTgZD'
totalPage<-NULL
lastDate<-Sys.Date()
DateVectorStr<-as.character(seq(as.Date("2016-01-01"),lastDate,by="5 days"))
for(i in 1:(length(DateVectorStr)-1)){
tempPage<-getPage("tsaiingwen",token,
since = DateVectorStr[i],until = DateVectorStr[i+1])
totalPage<-rbind(totalPage,tempPage)
}
nrow(totalPage)
```{r results='hide',message=FALSE, warning=FALSE}
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
## 讀取蔡英文粉絲團資料
```{r results='hide',message=FALSE, warning=FALSE}
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
```
```{r results='hide',message=FALSE, warning=FALSE}
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
```
```{r results='hide',message=FALSE, warning=FALSE}
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
```
```{r results='hide',message=FALSE, warning=FALSE}
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
```
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
```{r results='hide',message=FALSE, warning=FALSE}
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
```
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
if (!require('Rfacebook')){
install.packages("Rfacebook")
library(Rfacebook)
}
token<-'CAACEdEose0cBAAipJI4hnDlZCZBwqveMDZB7ZAdCoK9PPiqgoJZBciRCZBohbWmx8WEDaylKk3HZAiLnjXwl3l8ZAGFYpnOm6tjCiIZCSSTJZAISjtDRY8OsDw4BjqxK7RfWt1s3veTBajjuX8izMb6rE0ZCElDla3lOfyvJETZA2t09rUhGUDRvYTkudAPPuOIb6MPfiG1YSWUwhxzXULuq6QOrGePlXWvw7ZCEZD'
totalPage<-NULL
lastDate<-Sys.Date()
DateVectorStr<-as.character(seq(as.Date("2016-01-01"),lastDate,by="5 days"))
for(i in 1:(length(DateVectorStr)-1)){
tempPage<-getPage("tsaiingwen", token,
since = DateVectorStr[i],until = DateVectorStr[i+1])
totalPage<-rbind(totalPage,tempPage)
}
nrow(totalPage)
totalPage$datetime <- as.POSIXct(totalPage$created_time,
format = "%Y-%m-%dT%H:%M:%S+0000",
tz = "GMT")
totalPage$dateTPE <- format(totalPage$datetime, "%Y-%m-%d",
tz = "Asia/Taipei")
totalPage$weekdays <-weekdays(as.Date(totalPage$dateTPE))
output<-aggregate(message~weekdays+dateTPE,totalPage,length)
library(knitr)
kable(output, digits=2)
output1<-aggregate(likes_count~dateTPE,totalPage,mean)
library(knitr)
kable(output1, digits=2)
output2<-aggregate(comments_count~dateTPE,totalPage,mean)
library(knitr)
kable(output2, digits=2)
output3<-aggregate(shares_count~dateTPE,totalPage,mean)
library(knitr)
kable(output3, digits=2)
